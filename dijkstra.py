# -*- coding: utf-8 -*-
"""dijkstra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P-FFHwLi8ftuqyMq0KmeSkS4NvFkcDwh
"""

import heapq

def dijkstra(graph, start):
    # Priority queue to store the vertices to be processed
    pq = [(0, start)]  # (distance, vertex)

    # Dictionary to store the shortest distance to each vertex
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0

    # Dictionary to store the shortest path to each vertex
    previous_vertices = {vertex: None for vertex in graph}

    while pq:
        current_distance, current_vertex = heapq.heappop(pq)

        # If the current distance is greater than the recorded distance, skip processing
        if current_distance > distances[current_vertex]:
            continue

        # Explore the neighbors of the current vertex
        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight

            # Only consider this new path if it's better (shorter) than the previous one
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous_vertices[neighbor] = current_vertex
                heapq.heappush(pq, (distance, neighbor))

    return distances, previous_vertices

# Function to reconstruct the shortest path from the start to the end
def reconstruct_path(previous_vertices, start, end):
    path = []
    current_vertex = end
    while current_vertex is not None:
        path.insert(0, current_vertex)
        current_vertex = previous_vertices[current_vertex]

    if path[0] == start:
        return path
    else:
        return None  # No path exists

# Example graph represented as an adjacency dictionary
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

# Running the algorithm from vertex 'A'
start_vertex = 'A'
distances, previous_vertices = dijkstra(graph, start_vertex)

# Example: getting the shortest path from 'A' to 'D'
end_vertex = 'D'
print(f"Shortest path from {start_vertex} to {end_vertex}: {reconstruct_path(previous_vertices, start_vertex, end_vertex)}")
print(f"Shortest distance from {start_vertex} to {end_vertex}: {distances[end_vertex]}")